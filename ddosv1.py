# LICENSE 
# MIT License

#Copyright (c) 2025 - 2099 MR. Nexo444

#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

#========================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==================================================================================================================================================≠==========================================

# Additional Terms and Conditions

#1. Modification Notice: Any modified versions must be clearly marked as such and must not be represented as the original software.

#2. Commercial Use: The software may be used for commercial purposes, but the original copyright notice must remain intact.

#3. Attribution: Credit must be given to the original author (MR. Nexo444) in any distributions or derivative works.

#4. No Warranty: The author is not responsible for any damages or liabilities caused by the use of this software.

#5. Redistribution: Redistribution is permitted provided the license terms and copyright notice are included with all copies.

#6. Ethical Use: This software must not be used for illegal, malicious, or unethical purposes.

#7. Source Code: The source code may be used as a learning resource, but direct copying without modification is discouraged.

#8. Trademarks: This license does not grant permission to use the trade names, trademarks, service marks, or product names of the author.
# Script Obfuscated oleh Xbibz Official - MR. Nexo444
# DILARANG RECODE / RENAME ANJG!
# YANG RECODE KONTOL KAU MELEDAK!!!

import base64 # YANG RECODE KONTOL KAU MELEDAK!!!
import sys # YANG RECODE KONTOL KAU MELEDAK!!!
import os # YANG RECODE KONTOL KAU MELEDAK!!!

# lu liat liat ngapain?, mau recode? wkwkwk
if os.getenv("PYTHONDEBUG"): # YANG RECODE KONTOL KAU MELEDAK!!!
    print("Jangan coba-coba di-debug, ya anjing!") # YANG RECODE KONTOL KAU MELEDAK!!!
    sys.exit() # YANG RECODE KONTOL KAU MELEDAK!!!

try: # YANG RECODE KONTOL KAU MELEDAK!!!
    xbibz_ofc_gamteng = "" # YANG RECODE KONTOL KAU MELEDAK!!!
    exec(base64.b64decode(xbibz_ofc_gamteng).decode('utf-8')) # YANG RECODE KONTOL KAU MELEDAK!!!
except Exception as e: # YANG RECODE KONTOL KAU MELEDAK!!!
    print("Mampus Error scriptnya anjg!.") # YANG RECODE KONTOL KAU MELEDAK!!!
    # YANG RECODE KONTOL KAU MELEDAK!!!
